trigger:
  - azure-pipelines-all

stages:
  - stage: initialize
    displayName: "Initialize Variables"
    jobs:
      - job: set_variables
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - checkout: none # Skip repository checkout
          - script: |
              echo "##vso[task.setvariable variable=ISO_DATE;isOutput=true]$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
            displayName: "Generate ISO_DATE"
            name: iso_date

  - stage: linux
    dependsOn: initialize
    variables:
      ISO_DATE: $[ stageDependencies.initialize.set_variables.outputs['iso_date.ISO_DATE'] ] # Reference output variable
    jobs:
      - job: build
        pool:
          vmImage: "ubuntu-latest"
        container: gsalsero/quake3e-linux-builder:latest
        steps:
          - script: |
              echo "ISO_DATE: $ISO_DATE"
              make CFLAGS="$CFLAGS -DISO_DATE=\"$ISO_DATE\" -DBUILD_ID=$(Build.BuildId)"
            displayName: "Build quake3e"
          - task: CopyFiles@2
            inputs:
              SourceFolder: "build/release-linux-x86_64/"
              Contents: |
                quake3e.ded.x64
                quake3e.x64
              TargetFolder: "build/release-linux-x86_64/archive"
              CleanTargetFolder: true
              preserveTimestamp: true
          - task: ArchiveFiles@2
            inputs:
              rootFolderOrFile: build/release-linux-x86_64/archive
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(Build.ArtifactStagingDirectory)/quake3e-release-linux-x86_64-$(Build.BuildId).zip"
              replaceExistingArchive: true
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)"
              publishLocation: "pipeline"
  - stage: mingw64
    dependsOn: initialize
    variables:
      ISO_DATE: $[ stageDependencies.initialize.set_variables.outputs['iso_date.ISO_DATE'] ] # Reference output variable

    jobs:
      - job: build_mingw64
        displayName: "Build quake3e - MINGW64"
        pool:
          vmImage: "windows-latest"
        steps:
          - script: |
              # Install MSYS2 using Chocolatey
              choco install msys2 --params "/NoUpdate"
              refreshenv
            displayName: "Install MSYS2"

          - script: |
              # Update MSYS2 and install build dependencies
              C:\tools\msys64\usr\bin\bash -lc "pacman -Syu --noconfirm"
              C:\tools\msys64\usr\bin\bash -lc "pacman -S --noconfirm make mingw-w64-x86_64-gcc mingw-w64-i686-gcc"
            displayName: "Install build dependencies"

          - script: |
              # Set up MINGW64 environment and build the project
              $Env:MSYSTEM = "MINGW64"
              $Env:PATH += ";C:\tools\msys64\mingw64\bin"
              C:\tools\msys64\usr\bin\bash -lc "cd /c/$(Build.SourcesDirectory) && make CFLAGS=\"$CFLAGS -DISO_DATE='$ISO_DATE' -DBUILD_ID=$(Build.BuildId)\""
            displayName: "Build quake3e with MINGW64"

          - task: CopyFiles@2
            inputs:
              SourceFolder: "build/release-mingw64/"
              Contents: |
                quake3e.ded.x64.exe
                quake3e.x64.exe
              TargetFolder: "build/release-mingw64/archive"
              CleanTargetFolder: true
              preserveTimestamp: true
            displayName: "Copy build files"

          - task: ArchiveFiles@2
            inputs:
              rootFolderOrFile: build/release-mingw64/archive
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(Build.ArtifactStagingDirectory)/quake3e-release-mingw64-$(Build.BuildId).zip"
              replaceExistingArchive: true
            displayName: "Archive build artifacts"

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)"
              publishLocation: "pipeline"
            displayName: "Publish build artifacts"

  - stage: windows64
    dependsOn: initialize
    variables:
      ISO_DATE: $[ stageDependencies.initialize.set_variables.outputs['iso_date.ISO_DATE'] ] # Reference output variable

    jobs:
      - job: build_server
        displayName: "Build quake3e - server"
        pool:
          vmImage: "windows-latest"
        steps:
          - powershell: |
              Get-ChildItem -Path 'code\win32\msvc2017' -Recurse -Filter *.vcxproj |
              ForEach-Object {
                  (Get-Content $_.FullName) -replace '<PlatformToolset>v141</PlatformToolset>', '<PlatformToolset>v143</PlatformToolset>' | Set-Content $_.FullName
              }
            displayName: "Retarget platform toolset to v143"
          - task: VSBuild@1
            inputs:
              solution: "code/win32/msvc2017/quake3e-ded.vcxproj"
              platform: "x64"
              configuration: "Release"
              maximumCpuCount: true
              msbuildArchitecture: "x64"
            displayName: "Quake3e Server"
          - task: CopyFiles@2
            inputs:
              SourceFolder: 'code\win32\msvc2017\output\'
              Contents: "*.exe"
              TargetFolder: 'code\win32\msvc2017\output\archive'
              CleanTargetFolder: true
              preserveTimestamp: true

          - task: ArchiveFiles@2
            inputs:
              rootFolderOrFile: code\win32\msvc2017\output\archive
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(Build.ArtifactStagingDirectory)/quake3e-release-win-server-x64-$(Build.BuildId).zip"
              replaceExistingArchive: true
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)"
              publishLocation: "pipeline"

      - job: build_opengl
        displayName: "Build quake3e - OpenGL"
        pool:
          vmImage: "windows-latest"
        steps:
          - powershell: |
              Get-ChildItem -Path 'code\win32\msvc2017' -Recurse -Filter *.vcxproj |
              ForEach-Object {
                  (Get-Content $_.FullName) -replace '<PlatformToolset>v141</PlatformToolset>', '<PlatformToolset>v143</PlatformToolset>' | Set-Content $_.FullName
              }
            displayName: "Retarget platform toolset to v143"
          - task: VSBuild@1
            inputs:
              solution: "code/win32/msvc2017/renderer.vcxproj"
              platform: "x64"
              configuration: "Release"
              maximumCpuCount: true
              msbuildArchitecture: "x64"
            displayName: "OpenGL Renderer"
          - task: VSBuild@1
            inputs:
              solution: "code/win32/msvc2017/quake3e.vcxproj"
              msbuildArgs: "-p:UseWasapi=USE_WASAPI=0"
              platform: "x64"
              configuration: "Release"
              maximumCpuCount: true
              msbuildArchitecture: "x64"
            displayName: "OpenGL Quake3e"
          - task: CopyFiles@2
            inputs:
              SourceFolder: 'code\win32\msvc2017\output\'
              Contents: "*.exe"
              TargetFolder: 'code\win32\msvc2017\output\archive'
              CleanTargetFolder: true
              preserveTimestamp: true

          - task: ArchiveFiles@2
            inputs:
              rootFolderOrFile: code\win32\msvc2017\output\archive
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(Build.ArtifactStagingDirectory)/quake3e-release-win-opengl-x64-$(Build.BuildId).zip"
              replaceExistingArchive: true
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)"
              publishLocation: "pipeline"

      # Vulkan Build
      - job: build_vulkan
        displayName: "Build quake3e - Vulkan"
        pool:
          vmImage: "windows-latest"
        steps:
          - powershell: |
              Get-ChildItem -Path 'code\win32\msvc2017' -Recurse -Filter *.vcxproj |
              ForEach-Object {
                  (Get-Content $_.FullName) -replace '<PlatformToolset>v141</PlatformToolset>', '<PlatformToolset>v143</PlatformToolset>' | Set-Content $_.FullName
              }
            displayName: "Retarget platform toolset to v143"
          - task: VSBuild@1
            inputs:
              solution: "code/win32/msvc2017/renderervk.vcxproj"
              platform: "x64"
              configuration: "Release"
              maximumCpuCount: true
              msbuildArchitecture: "x64"
            displayName: "Vulkan Renderer"
          - task: VSBuild@1
            inputs:
              solution: "code/win32/msvc2017/quake3e.vcxproj"
              msbuildArgs: "-p:UseWasapi=USE_WASAPI=0"
              platform: "x64"
              configuration: "Release"
              maximumCpuCount: true
              msbuildArchitecture: "x64"
            displayName: "Vulkan Quake3e"

          - task: CopyFiles@2
            inputs:
              SourceFolder: 'code\win32\msvc2017\output\'
              Contents: "*.exe"
              TargetFolder: 'code\win32\msvc2017\output\archive'
              CleanTargetFolder: true
              preserveTimestamp: true

          - powershell: |
              cd code\win32\msvc2017\output\archive
              Get-ChildItem -Filter *.exe | ForEach-Object {
                  if ($_.Name -match "^(quake3e)(\.ded)?(\.x64\.exe)$") {
                      $newName = $matches[1] + "-vulkan" + $matches[2] + $matches[3]
                      Rename-Item -Path $_.FullName -NewName $newName
                  }
              }
            displayName: "Rename files to end with -vulkan.x64.exe"

          - task: ArchiveFiles@2
            inputs:
              rootFolderOrFile: code\win32\msvc2017\output\archive
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(Build.ArtifactStagingDirectory)/quake3e-release-win-vulkan-x64-$(Build.BuildId).zip"
              replaceExistingArchive: true
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)"
              publishLocation: "pipeline"
# - stage: macOS
#   jobs:
#   - job: build
#     pool:
#       vmImage: 'macos-14-arm64'
#     steps:
#     - script: |
#         make
#         ls -R
#       displayName: 'make quake3e'
#     # - task: ArchiveFiles@2
#     #   inputs:
#     #     rootFolderOrFile: build/release-linux-x86_64/
#     #     includeRootFolder: true
#     #     archiveType: 'zip'
#     #     archiveFile: '$(Build.ArtifactStagingDirectory)/quake3e-release-macos-arm64-$(Build.BuildId).zip'
#     #     replaceExistingArchive: true
#     # - task: PublishPipelineArtifact@1
#     #   inputs:
#     #     targetPath: '$(Build.ArtifactStagingDirectory)'
#     #     publishLocation: 'pipeline'
